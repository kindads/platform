@model KindAds.Comun.Models.ViewModel.KindAdsV2.PublisherProfileViewModel
@{
  ViewBag.Title = "Create your profile";
  Layout = "~/Views/Shared/_MarketplacePubLayout.cshtml";
}

<div class="container-fluid">
  <div class="row" style="display:none;">
    <div class="col-sm-12">
      <ol class="breadcrumb">
        <li><a href="#">Publisher</a></li>
        <li class="active">Profile</li>
      </ol>
    </div>
  </div>

  <div class="row">
    <div class="col-sm-12">
      <div class="callout callout-warning">Complete your Publisher profile to get started</div>
      <h1>Create your Publisher Profile</h1>
      <p>Your profile is viewable by all KindAds users. This is where you can describe yourself, your business, the profile of your audience(s) and any other useful information to provide to advertisers.</p>

      @using (Html.BeginForm("CreateProfile", "PublisherProfile", null, FormMethod.Post, new { enctype = "multipart/form-data", @id = "formCreateProfile" }))
      {
        @Html.HiddenFor(model => model.preferencesStringify, new { @id = "preferencesStringify" })
        <section class="form-data">
         
            <fieldset>
              <div class="form-container">
                <article>
                  <div class="form-group">
                    @Html.Label("What will be the display name for this profile?", htmlAttributes: new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Name, new { @placeholder = "e.g. Your Company Name", @class = "form-control", @required = "true", @data_msg_required = "Name is required", @data_val = "true", @data_val_required = "Name is required", @maxlength = 30 })
                    @Html.ValidationMessageFor(model => model.Name)
                    <span id="counterTitle" class="counter">30 / 30 remaining</span>
                  </div>

                  <div class="form-group">
                    @Html.Label("At a high level, provide a description on yourself, your team(s) and marketing experience", htmlAttributes: new { @class = "control-label" }).
                    <p>
                      This text will be shown on your main Profle page to give advertisers a better idea of who thy will be working with.
                      After you create your Profile, you will be able to create Audiences which is where yo can describe your audience in more detail.
                      Your Profile is to describe yourself, your team(s) and your marketng experince at a high level.
                      You will be able to provide more details about each Audience in the next stage of setting up your Kind Ads Audiences.
                    </p>
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control no-resize", @required = "true", @data_msg_required = "Description is required", @rows = "7", @cols = "80", @wrap = "hard", @placeholder = "Write out your description here....", @maxlength = 1000 })
                    @Html.ValidationMessageFor(model => model.Description)
                    <span id="counterDescription" class="counter">1000 / 1000 remaining</span>
                  </div>

                  <div class="form-group">
                    @Html.Label("Choose an icon to display with your profile", htmlAttributes: new { @class = "control-label" })
                    <div class="marquee-upload clearfix">
                      @KindAds.Helpers.ImgSelectorHelper.DisplayImageSelector("fileupIcon", Model.profile.IconUrl)
                      <div class="content">
                        <div class="btn btn-default file">
                          + Upload Files
                          <input id="fileupIcon" name="fileupIcon" type="file" />
                        </div>
                        <div>
                          Drag &amp; drop an icon we can use to display your profile in various parts of the site<br />
                          <small>Recommended 96 x 96px</small>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="form-group">
                    @Html.Label("What country are you located in?", htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.Country, new SelectList(string.Empty, "Value", "Text"), new { @id = "BusinessCountry", @class = "form-control dropdown", @required = "true", @data_msg_required = "Business country is required" })
                    @Html.ValidationMessage("Country")
                  </div>

                  <div class="form-group">
                    @Html.Label("How experienced is your business with digital advertising?", htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.ExperienceLevel, new SelectList(string.Empty, "Value", "Text"), new { @class = "form-control dropdown", @required = "true", @data_msg_required = "Experience level is required" })
                    @Html.ValidationMessage("ExperienceLevel")
                  </div>


                </article>

                <article class="clearfix">
                  <h2>
                    Advertiser Preferences
                    <small>Optional</small>
                  </h2>

                  <div class="form-group">
                    <p>
                      You can set some default Publisher Preferences here that will be universal across all of your campaigns under the profile.<br />
                      Remember these are just peferences, so they won't exclude anyone from finding you but it wil help us match you with the right publishers. You can change preferences on any individual campaign you post and you can edit or remove these default preference any time.
                    </p>
                  </div>

                  <div class="form-group">
                    @Html.Label("What type of businessses would you prefer to work with?", htmlAttributes: new { @class = "control-label" })
                    <p>
                      Choose as many as you'd like.
                    </p>
                    <div class="flexbox radio-group" role="BusinessLikes" aria-label="Likes">

                      @foreach (var industrie in Model.GetIndustries())
                      {
                        <div class="flexbox-item radio radio-check">
                          <label for="@industrie.Id">
                            @industrie.Name
                            <input data-val="true" id="@industrie.Id" name="BusinessLikes" type="checkbox" onclick="selectIndustryPreference('@industrie.Id');"/>
                            <div class="control_indicator"></div>
                          </label>
                        </div>
                      }

                    </div>
                  </div>

                  <div class="form-group">
                    @Html.Label("What type of businessses would you prefer NOT to work with?", htmlAttributes: new { @class = "control-label" })
                    <p>
                      Choose as many as you'd like.
                    </p>
                    <div class="flexbox radio-group" role="BusinessDislikes" aria-label="Disikes">

                      @foreach (var industrie in Model.GetIndustries())
                      {
                        <div class="flexbox-item radio radio-check" id="flex-item-@industrie.Id">
                          <label for="d+@industrie.Id">
                            @industrie.Name
                            <input data-val="true" id="d+@industrie.Id" name="BusinessDislikes" type="checkbox" onclick="selectIndustryDislikePreference('@industrie.Id');">
                            <div class="control_indicator"></div>
                          </label>
                        </div>
                      }

                    </div>
                  </div>

                  <div class="pull-left">

                    <input type="submit" id="btnCreateProfile" class="btn btn-secondary btn-lg" value="Create profile" />
                  </div>
                </article>
              </div>
            </fieldset>
      
        </section>
      }

    </div>
  </div>
</div>

@Html.Partial("_PublisherProfileModal")

@section Scripts {
  <script src="~/Scripts/Utils/image-upload.js"></script>

  <script type="text/javascript">
    var dict = []; // create an empty array
    var preferences = [];

    dict.push({
      id: "",
      visibility: ""
    });

    $(document).ready(function () {
      // images are required
      $("#lblFileupImg").text("Image is required");
      $("#lblFileupIcon").text("Image is required");

      //Validate form
      $("#formCreateProfile").validate();

      //Fill Catalog Business country
      $("#BusinessCountry").empty();
      $.ajax({
        type: 'POST',
        url: '@Url.Action("FillCatCountry")',
        dataType: 'json',
        success: function (elements) {
          if (elements != null && elements != '') {
            $("#BusinessCountry").append('<option value="">' + 'Choose country' + '</option>');
            $.each(elements, function (i, value) {
              $("#BusinessCountry").append('<option value="' + value.Value + '">' + value.Text + '</option>');
            });
          } else {
            $("#BusinessCountry").append('<option value="">' + 'Choose country' + '</option>');
          }
        },
        error: function (ex) {
          alert('Failed to fill catalog country.' + ex);
        }
      });

      //Fil Catalog Experience Level
      $("#ExperienceLevel").empty();
      $.ajax({
        type: 'POST',
        url: '@Url.Action("FillCatBusinessExpertise")',
        dataType: 'json',
        success: function (elements) {
          if (elements != null && elements != '') {
            $("#ExperienceLevel").append('<option value="">' + 'Choose experience level' + '</option>');
            $.each(elements, function (i, value) {
              $("#ExperienceLevel").append('<option value="' + value.Value + '">' + value.Text + '</option>');
            });
          } else {
            $("#ExperienceLevel").append('<option value="">' + 'Choose experience level' + '</option>');
          }
        },
        error: function (ex) {
          alert('Failed to fill catalog experience level.' + ex);
        }
      });

          //Validation File Icon

    @KindAds.Helpers.ImgSelectorHelper.IncludeJSDisplayImageSelector("fileupIcon", "")
    });




    //Action Create Profile
    $('#formCreateProfile').submit(function (e) {
      e.preventDefault();
      if ($("#formCreateProfile").valid() && validateImgFile(72,72,"#fileupIcon", "#lblfileupIcon")) {
        var stringify = JSON.stringify(preferences);
        $("#preferencesStringify").val(stringify);
        alert(stringify);
        var _data = new FormData(this);

        $('#loadingPublisherProfileModal').modal('show');
        $.ajax({
          url: "CreateProfile",
          type: "Post",
          data: _data,
          cache: false,
          contentType: false,
          processData: false,
          success: function (response) {
            if (response.success) {
              $('#loadingPublisherProfileModal').modal('hide');
              $('#PublisherProfileModal').modal('show')
            } else {
              $('#loadingPublisherProfileModal').modal('hide');
              $('#PublisherProfileModalBody').append('Error');
              $('#PublisherProfileModalBodyError').text('');
              $('#PublisherProfileModal').modal('show')
            }

          },
          error: function (xhr, error, status) {
            $('#loadingCampaignModal').modal('hide');
            $('#PublisherProfileModalBody').append('Error');
            $('#PublisherProfileModalBodyError').text('');
            $('#PublisherProfileModal').modal('show')
          }
        });
      } else {
        return false;
      }

    });



    function selectIndustryPreference(industryId) {
      makeVisibility(industryId);
      makePreferences(industryId, true);
    };

    function selectIndustryDislikePreference(industryId) {
      makePreferences(industryId, false);
    };

    function makeVisibility(industryId) {
      var industryItem = 'flex-item-' + industryId;
      var existInDictionary = false;
      var indexInDictionary = -1;

      // check if exist any element in dictionary
      if (dict.length > 0) {

        // check if exist in dictionary
        for (var i = 0; i <= (dict.length - 1); i++) {
          if (dict[i].id == industryItem) {
            existInDictionary = true;
            indexInDictionary = i;
          }
        }

        if (existInDictionary) {
          // show again
          $("#" + industryItem).show();

          // pop element
          dict.splice(indexInDictionary, 1);
        }
        else {
          // push element
          dict.push({
            id: industryItem,
            visibility: "none"
          });

          // hide element
          $("#" + industryItem).hide();
        }
      }
      else {

        // push element
        dict.push({
          id: industryItem,
          visibility: "none"
        });

        // hide element
        $("#" + industryItem).hide();
      }
    };

    function makePreferences(industryId, like) {
      var industryItem = 'flex-item-' + industryId;
      var existInDictionary = false;
      var indexInDictionary = -1;

      // check if exist any element in dictionary
      if (preferences.length > 0) {

        // check if exist in dictionary
        for (var i = 0; i <= (preferences.length - 1); i++) {
          if (preferences[i].IndustryId == industryItem) {
            existInDictionary = true;
            indexInDictionary = i;
          }
        }

        if (existInDictionary) {
          // pop element
          preferences.splice(indexInDictionary, 1);
        }
        else {

          // push element
          preferences.push({
            IndustryId: industryItem,
            Like: like,
            AdvertiserProfileId: "undefined"
          });
        }
      }
      else {

        // push element
        preferences.push({
          IndustryId: industryItem,
          Like: like,
          AdvertiserProfileId: "undefined"
        });
      }
  };

    //Validate Text Remaining
    $("#Name").on('keyup', function (e) {
      var totalLength = 30;
      var textLength = $("#Name").val().length;
      var remaining = totalLength - textLength;
      $("#counterTitle").text(" " + remaining + " / " + totalLength + " remaining");
    });
    $("#Description").on('keyup', function (e) {
      var totalLength = 1000;
      var textLength = $("#Description").val().length;
      var remaining = totalLength - textLength;
      $("#counterDescription").text(" " + remaining + " / " + totalLength + " remaining");
    });
  </script>
}
